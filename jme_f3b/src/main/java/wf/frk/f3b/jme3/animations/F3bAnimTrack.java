// Generated by delombok at Sat Jul 28 16:45:23 CEST 2018
package wf.frk.f3b.jme3.animations;

import wf.frk.f3banimation.Bone;
import wf.frk.f3banimation.BoneTrack;
import wf.frk.f3banimation.Skeleton;
import wf.frk.f3banimation.SpatialTrack;
import wf.frk.f3banimation.Track;
import com.jme3.math.Quaternion;
import com.jme3.math.Transform;
import com.jme3.math.Vector3f;


public class F3bAnimTrack {
	public static final String _SPATIAL = "";
	protected final String boneName;
	protected final float[] times;
	protected final Vector3f[] translations;
	protected final Quaternion[] rotations;
	protected final Vector3f[] scales;

	public Track toJME(Skeleton skel) {
		if (boneName == _SPATIAL) {
			Transform[] frames=new Transform[translations.length];
			for(int i=0;i<frames.length;i++){
				frames[i]=new Transform();
				frames[i].setTranslation(translations[i]);
				frames[i].setRotation(rotations[i]);
				frames[i].setScale(scales[i]);					
			}
			SpatialTrack track=new SpatialTrack(times, frames);
			return track;
		}
		if (skel != null) {
			int boneIndex = skel.getBoneIndex(boneName);

			if (boneIndex > -1) {
				Bone bone = skel.getBone(boneIndex);
				Transform[] frames=new Transform[translations.length];
				for(int i=0;i<frames.length;i++){
					frames[i]=new Transform();
					frames[i].setTranslation(translations[i]);
					frames[i].setRotation(rotations[i]);
					frames[i].setScale(scales[i]);					
				}
				BoneTrack track = new BoneTrack(boneIndex, times,frames);
				return track;
			}
		}
		return null;
	}

	@java.lang.SuppressWarnings("all")
	public F3bAnimTrack(final String boneName, final float[] times, final Vector3f[] translations, final Quaternion[] rotations, final Vector3f[] scales) {
		this.boneName = boneName;
		this.times = times;
		this.translations = translations;
		this.rotations = rotations;
		this.scales = scales;
	}

	@java.lang.SuppressWarnings("all")
	public String getBoneName() {
		return this.boneName;
	}

	@java.lang.SuppressWarnings("all")
	public float[] getTimes() {
		return this.times;
	}

	@java.lang.SuppressWarnings("all")
	public Vector3f[] getTranslations() {
		return this.translations;
	}

	@java.lang.SuppressWarnings("all")
	public Quaternion[] getRotations() {
		return this.rotations;
	}

	@java.lang.SuppressWarnings("all")
	public Vector3f[] getScales() {
		return this.scales;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof F3bAnimTrack)) return false;
		final F3bAnimTrack other = (F3bAnimTrack) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		final java.lang.Object this$boneName = this.getBoneName();
		final java.lang.Object other$boneName = other.getBoneName();
		if (this$boneName == null ? other$boneName != null : !this$boneName.equals(other$boneName)) return false;
		if (!java.util.Arrays.equals(this.getTimes(), other.getTimes())) return false;
		if (!java.util.Arrays.deepEquals(this.getTranslations(), other.getTranslations())) return false;
		if (!java.util.Arrays.deepEquals(this.getRotations(), other.getRotations())) return false;
		if (!java.util.Arrays.deepEquals(this.getScales(), other.getScales())) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof F3bAnimTrack;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final java.lang.Object $boneName = this.getBoneName();
		result = result * PRIME + ($boneName == null ? 43 : $boneName.hashCode());
		result = result * PRIME + java.util.Arrays.hashCode(this.getTimes());
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getTranslations());
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getRotations());
		result = result * PRIME + java.util.Arrays.deepHashCode(this.getScales());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "F3bAnimTrack(boneName=" + this.getBoneName() + ", times=" + java.util.Arrays.toString(this.getTimes()) + ", translations=" + java.util.Arrays.deepToString(this.getTranslations()) + ", rotations=" + java.util.Arrays.deepToString(this.getRotations()) + ", scales=" + java.util.Arrays.deepToString(this.getScales()) + ")";
	}
}
