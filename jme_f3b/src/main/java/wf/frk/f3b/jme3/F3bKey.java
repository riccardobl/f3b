// Generated by delombok at Sat Jul 28 16:45:23 CEST 2018
package wf.frk.f3b.jme3;

import java.lang.ref.WeakReference;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.jme3.asset.AssetManager;

import wf.frk.f3b.jme3.physicsloader.PhysicsLoader;
import wf.frk.f3b.jme3.physicsloader.constraint.GenericConstraint;
import wf.frk.f3b.jme3.physicsloader.impl.PhysicsLoaderModelKey;
import wf.frk.f3b.jme3.physicsloader.impl.bullet.BulletPhysicsLoader;

public class F3bKey extends PhysicsLoaderModelKey<F3bKey> implements F3bPhysicsLoaderSettings {
	@java.lang.SuppressWarnings("all")
	private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(F3bKey.class);
	protected NodeBuilder NODE_BUILDER = new DefaultNodeBuilder();

	protected WeakReference<F3bContext> context=null;
	protected WeakReference<F3b> f3b=null;
	protected WeakReference<F3bHeaders> headers=null;
	protected AssetManager assetManager;
	protected boolean resolveAllHeaders=true;

	public F3bKey(){}
	


	public F3bKey(String s) {
		super(s);
	}

	public void setName(String n){
		this.name=n;
	}

	public void setContext(F3bContext ctx){
		this.context=new WeakReference<F3bContext>(ctx);
	}

	public void setAssetManager(AssetManager am){
		this.assetManager=am;
	}

	public AssetManager getAssetManager(){
		return this.assetManager;
	}

	public void setLoaderInstance(F3b f3b){
		this.f3b=new WeakReference<F3b>(f3b);
	}

	public void setHeaders(F3bHeaders hx){
		this.headers=new WeakReference<F3bHeaders>(hx);
	}
	public F3bHeaders getHeaders(){
		if(this.headers==null)return null;
		return this.headers.get();
	}

	public F3bContext getContext(){
		if(this.context==null)return null;
		return this.context.get();
	}

	public F3b getLoaderInstance(){
		if(this.f3b==null)return null;
		return this.f3b.get();
	}

	public void resolveAllHeaders(boolean v){
		this.resolveAllHeaders=v;
	}

	

	public F3bKey useNodeBuilder(NodeBuilder b) {
		NODE_BUILDER = b;
		return this;
	}

	public NodeBuilder getNodeBuilder() {
		return NODE_BUILDER;
	}

	@Override
	public F3bKey usePhysics(PhysicsLoader<?, ?> l) {
		if (l != null && !(l instanceof BulletPhysicsLoader)) {
			log.warn("Cannot use {}, physicsloader not supported", l.getClass());
			return this;
		}
		super.usePhysics(l);
		return this;
	}

	private static final Class<?>[] supportedConstraints = {GenericConstraint.class};

	@Override
	public Class<?>[] getSupportedConstraints() {
		return supportedConstraints;
	}
}
