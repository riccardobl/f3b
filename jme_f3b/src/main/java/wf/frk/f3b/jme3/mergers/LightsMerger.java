// Generated by delombok at Sat Jul 28 16:45:23 CEST 2018
package wf.frk.f3b.jme3.mergers;

import com.jme3.light.AmbientLight;
import com.jme3.light.DirectionalLight;
import com.jme3.light.Light;
import com.jme3.light.PointLight;
import com.jme3.light.SpotLight;
import com.jme3.math.FastMath;
import com.jme3.scene.Node;
import f3b.Datas.Data;
import wf.frk.f3b.jme3.F3bContext;
import wf.frk.f3b.jme3.F3bKey;

public class LightsMerger implements Merger {
	@java.lang.SuppressWarnings("all")
	private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LightsMerger.class);

	public void apply(Data src, Node root, F3bKey key) {
		F3bContext context=key.getContext();
		for (f3b.Lights.Light l : src.getLightsList()) {
			Light lg = null;
			float intensity=l.getIntensity();

			switch (l.getKind()) {
			case spot: 
				{
					lg = new SpotLight();
					SpotLight sl = (SpotLight) lg;
					sl.setSpotRange(1000);
					sl.setSpotInnerAngle(5.0F * FastMath.DEG_TO_RAD);
					sl.setSpotOuterAngle(10.0F * FastMath.DEG_TO_RAD);
					if (l.hasSpotAngle()) {
						float max = l.getSpotAngle().getMax();
						switch (l.getSpotAngle().getCurveCase()) {
						case CURVE_NOT_SET: 
							sl.setSpotOuterAngle(max);
							sl.setSpotInnerAngle(max);
							break;

						case LINEAR: 
							sl.setSpotOuterAngle(max * l.getSpotAngle().getLinear().getEnd());
							sl.setSpotInnerAngle(max * l.getSpotAngle().getLinear().getBegin());
							break;

						default: 
							{
								sl.setSpotOuterAngle(max);
								sl.setSpotInnerAngle(max);
								log.warn("doesn\'t support curve like {} for spot_angle", l.getSpotAngle().getCurveCase());
							}
						}
					}
					if (l.hasRadialDistance()) {
						sl.setSpotRange(l.getRadialDistance().getMax());
					}
					break;
				}

			case point: 
				{
					lg = new PointLight();
					PointLight pl = (PointLight) lg;
					pl.setRadius(0f);			
					intensity*=0.1;
					break;
				}

			case directional: 
				{
					lg = new DirectionalLight();
					break;
				}

			case ambient: 
				{
					lg = new AmbientLight();
					break;
				}

			default: 
				{
					log.warn("{} light not supported", l.getKind());
				}
			}
			if (lg != null) {
				lg.setName(l.getName());
				lg.setColor(wf.frk.f3b.jme3.ext.jme3.Vector4fExt.toColorRGBA(wf.frk.f3b.jme3.ext.f3b.TypesExt.toJME(l.getColor())).mult(intensity));
				context.put(l.getId(), lg);
			}
		}
	}
}
