// Generated by delombok at Sat Jul 28 16:45:23 CEST 2018
package wf.frk.f3b.jme3;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

@SuppressWarnings("unchecked")
public class F3bContext {
	@java.lang.SuppressWarnings("all")
	private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(F3bContext.class);


	private Map<String, Object> storage = new HashMap<String, Object>();
	private Map<String, List<String>> links = new HashMap<String, List<String>>();
	private F3bKey settings = new F3bKey("default");

	public  void setSettings(F3bKey s) {
		settings = s;
	}

	public  F3bKey getSettings() {
		return settings;
	}

	public  <T> T get(String ref) {
		return (T) storage.get(ref);
	}

	public  String idOf(Object val) {
		for (Entry<String, Object> entry : storage.entrySet()) {
			if (entry.getValue() == val) return entry.getKey();
		}
		return null;
	}

	public  <T> T put(String ref, Object val) {
		T t = (T) storage.put(ref, val);
		log.debug("Add  {} to context", ref);
		return t;
	}

	public  <T> T put(String ref, Object val, String link_to) {
		T out = put(ref, val);
		linkedRefs(link_to).add(ref);
		log.debug("Link  {} to {}", ref, link_to);
		return out;
	}

	public  <T> T removeWithLinks(String ref) {
		List<String> ls = links.get(ref);
		T out = (T) storage.remove(ref);
		for (String l : ls) remove(l);
		return out;
	}

	public  <T> T remove(String ref) {
		links.remove(ref);
		return (T) storage.remove(ref);
	}

	public  List<String> linkedRefs(String ref) {
		List<String> linked = links.get(ref);
		if (linked == null) {
			linked = new LinkedList<String>();
			links.put(ref, linked);
		}
		return linked;
	}

	public  String toString() {
		StringBuilder sb = new StringBuilder();
		LinkedList<String> ignore = new LinkedList<String>();
		for (Entry<String, Object> entry : storage.entrySet()) {
			String k = entry.getKey();
			Object v = entry.getValue();
			if (!ignore.contains(k)) {
				sb.append("$ ").append(k).append(" = ").append(v.getClass()).append("(").append(v.hashCode()).append(")\n");
				List<String> linked = linkedRefs(k);
				for (String l : linked) {
					v = get(l);
					sb.append("$ ----| ").append(l).append(" = ").append(v.getClass()).append("(");
					try {
						sb.append(v.toString());
					} catch (Throwable t) {
						sb.append(v.hashCode());
					}
					sb.append(")\n");
				}
				ignore.addAll(linked);
			}
		}
		return sb.toString();
	}


}
